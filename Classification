pip install scikit-learn

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# Load dataset
data = pd.read_csv('brain_tumor_dataset.csv')

# Separate features and target variable
X = data.drop(['Image', 'Class'], axis=1)  # drop non-features and target variable
y = data['Class']  # target variable

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Initialize the Logistic Regression model
model = LogisticRegression()

# Train the model
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
print("Classification Report:\n", classification_report(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("Accuracy Score:", accuracy_score(y_test, y_pred))



#CNN
pip install tensorflow

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Assuming you have a directory of images for each class
train_datagen = ImageDataGenerator(rescale=1./255, validation_split=0.2)  # rescale pixel values and split data

train_generator = train_datagen.flow_from_directory(
    'path_to_train_images',  # replace with your image directory path
    target_size=(64, 64),  # resize images
    batch_size=32,
    class_mode='binary',  # for binary classification
    subset='training')

validation_generator = train_datagen.flow_from_directory(
    'path_to_train_images',  # same directory as training data
    target_size=(64, 64),
    batch_size=32,
    class_mode='binary',
    subset='validation')

model = Sequential()

# Convolutional layer
model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(64, 64, 3)))
model.add(MaxPooling2D(2, 2))

# Adding a second convolutional layer
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D(2, 2))

# Flattening
model.add(Flatten())

# Full connection
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(1, activation='sigmoid'))  # sigmoid for binary classification

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

history = model.fit(
    train_generator,
    steps_per_epoch=train_generator.samples // train_generator.batch_size,
    validation_data=validation_generator,
    validation_steps=validation_generator.samples // validation_generator.batch_size,
    epochs=10)

# Evaluate the model on validation data
val_loss, val_accuracy = model.evaluate(validation_generator)
print(f"Validation accuracy: {val_accuracy}")


#Hybrid mdoel approach 
# Assuming 'model' is your trained CNN model
# Remove the last layer (classification layer) to get the feature extractor
feature_extractor = tf.keras.Model(inputs=model.inputs, outputs=model.layers[-2].output)

# Function to extract features from a batch of images
def extract_features(image_batch):
    features = feature_extractor.predict(image_batch)
    return features

# Assuming 'structured_data' is your DataFrame containing the structured features
# And 'image_features' is a DataFrame containing features extracted by CNN

combined_features = pd.concat([structured_data, image_features], axis=1)

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

# Preparing the combined dataset
X = combined_features.drop('Class', axis=1)  # Features
y = combined_features['Class']  # Target

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Train logistic regression
logistic_model = LogisticRegression()
logistic_model.fit(X_train_scaled, y_train)

# Evaluate the model
y_pred = logistic_model.predict(X_test_scaled)
# Use metrics like accuracy_score, confusion_matrix, etc., to evaluate the model

